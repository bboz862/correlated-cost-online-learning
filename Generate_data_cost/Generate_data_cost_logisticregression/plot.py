# auto-generated by run.py
import matplotlib, matplotlib.pyplot as plt

my_seed = 333535663550095303
TRIALS = 10
INCLUDE = [1, 4, 9, 8]
POS_LABELS = [8, 9]
EXPENSIVE = [1, 8]
CHEAP = [4, 9]
budgets = [40.0, 80.0, 160.0, 320.0]
cost_names = ['unif_indep', 'unif_corr', 'bernoulli_indep_p=0.2', 'bernoulli_corr_p=0.2']
mech_names = ['baseline', 'naive', 'rs12 (unif)', 'ours']
errs = [[[0.051267467172249143, 0.051267467172249143, 0.051267467172249143, 0.051267467172249143], [0.051267467172249143, 0.051267467172249143, 0.051267467172249143, 0.051267467172249143], [0.051267467172249143, 0.051267467172249143, 0.051267467172249143, 0.051267467172249143], [0.051267467172249143, 0.051267467172249143, 0.051267467172249143, 0.051267467172249143]], [[0.24095920230320902, 0.18484656976335928, 0.14144371883996909, 0.1119443859279545], [0.24095920230320902, 0.18484656976335928, 0.14144371883996909, 0.1119443859279545], [0.24095920230320902, 0.18484656976335928, 0.14144371883996909, 0.1119443859279545], [0.24095920230320902, 0.18484656976335928, 0.14144371883996909, 0.1119443859279545]], [[0.29233199915736252, 0.17670809634154902, 0.1367109051330665, 0.10621445123235729], [0.26925075486272032, 0.17877255810687451, 0.12607962923951968, 0.10324415420265431], [0.170676216557826, 0.12890246471455655, 0.10407976967909557, 0.085963064391545538], [0.2675373920370761, 0.2301172670458535, 0.13289094866933504, 0.10320202232989258]], [[0.20878449547082367, 0.11291341900147464, 0.093940032301102455, 0.073534161926830988], [0.18257847061301874, 0.11174074854293942, 0.086609086440558966, 0.06887156800786462], [0.1039182641668422, 0.076595744680851063, 0.063612105891440202, 0.058535215223650031], [0.16995997472087634, 0.1206446176532547, 0.086152657818973383, 0.070156590127097809]]]
squared_errs = [[[0.002630481775346766, 0.002630481775346766, 0.002630481775346766, 0.002630481775346766], [0.002630481775346766, 0.002630481775346766, 0.002630481775346766, 0.002630481775346766], [0.002630481775346766, 0.002630481775346766, 0.002630481775346766, 0.002630481775346766], [0.002630481775346766, 0.002630481775346766, 0.002630481775346766, 0.002630481775346766]], [[0.059217190336615211, 0.034664076961282042, 0.020526600975046699, 0.012769703882794322], [0.059217190336615211, 0.034664076961282042, 0.020526600975046699, 0.012769703882794322], [0.059217190336615211, 0.034664076961282042, 0.020526600975046699, 0.012769703882794322], [0.059217190336615211, 0.034664076961282042, 0.020526600975046699, 0.012769703882794322]], [[0.09305519837938192, 0.03215958351860268, 0.019021369975587666, 0.011492773729994811], [0.075523102288042335, 0.032772567110549315, 0.016100404306910301, 0.010778952431904644], [0.046468337406510012, 0.021894574748969185, 0.011831496314945308, 0.0074902260943546361], [0.07406034634632086, 0.0539756482942935, 0.017878819422579347, 0.010848367510242459]], [[0.044817310482913972, 0.012880035880186453, 0.0090204307039491605, 0.0054688153063812712], [0.034460586514661759, 0.012617542271821722, 0.0075866729065190109, 0.0047657801740175632], [0.01143078692990473, 0.0059589386769916437, 0.0040686940743162427, 0.0034377627956826405], [0.030315820756873654, 0.014800654325547566, 0.0074915993273396968, 0.0049529200261011911]]]

def stddev(mi,ci,bi):
	return float(TRIALS)*(squared_errs[mi][ci][bi] - errs[mi][ci][bi]**2.0)/float(TRIALS - 1)
	
print "maximum sample std deviation: " + str(max([max([max([stddev(mi,ci,bi) for bi in range(len(budgets))]) for ci in range(len(cost_names))]) for mi in range(len(mech_names))]))

linewidth = 1.5

# compare mechanisms
for ci,costname in enumerate(cost_names):
	plt.figure()
	for mi in range(len(mech_names)):
		plt.plot(budgets, errs[mi][ci], linewidth = linewidth)
	plt.legend(mech_names)
	plt.title("Cost type = " + costname)
	plt.xlabel("Budget")
	plt.ylabel("risk")

# compare costtypes for our mechanism
try:
	mi = mech_names.index("ours")
	plt.figure()
	for ci,costname in enumerate(cost_names):
		plt.plot(budgets,errs[mi][ci], linewidth=linewidth)
	plt.legend(cost_names)
	plt.title("Ours")
	plt.xlabel("Budget")
	plt.ylabel("risk")
except:
	pass


plt.show()
